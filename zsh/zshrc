#!/usr/bin/env zsh
############################################################################
#    Author: Wenxuan Zhang                                                 #
#     Email: wenxuangm@gmail.com                                           #
#   Created: 2020-01-03 16:33                                              #
############################################################################
# zmodload zsh/zprof
bindkey -e # should be on top!

##### plugin manager {{{ #####
[ -d ~/.zplugin/bin ] || {
    mkdir -p ~/.zplugin
    git clone --depth=1 https://github.com/zdharma/zplugin.git ~/.zplugin/bin || exit 1
}
source "$HOME/.zplugin/bin/zplugin.zsh"
zpl ice depth='1'; zpl light 'romkatv/zsh-defer'
##### }}} #####

##### utils {{{ #####
# simple colored logger
loginfo()  { printf "%b[info]%b %s\n"  '\e[0;32m\033[1m' '\e[0m' "$@" >&2; }
logwarn()  { printf "%b[warn]%b %s\n"  '\e[0;33m\033[1m' '\e[0m' "$@" >&2; }
logerror() { printf "%b[error]%b %s\n" '\e[0;31m\033[1m' '\e[0m' "$@" >&2; }
function synchronized() {
    local lock="$1" handler="$2" fallback="$3"
    [ -e "$lock" ] && kill -0 "$(command cat "$lock" 2>/dev/null)" && return 1

    trap "command rm -f $lock" INT TERM EXIT
    mkdir -p "${lock%/*}" && echo $$ > "$lock"

    eval "$handler"

    command rm -f "$lock"
}
# zsh-cached-compiled-source
ZCCS_DIR="/tmp/zsh_cache/$UID"
function zccs() {
    local srcgen="$1" dest="$ZCCS_DIR/${2:-$1}.zccs" lock="$ZCCS_DIR/lock"
    local handler="
        [ -f '$dest' ] && return # double check
        eval '$srcgen' > '$dest'
        zcompile '$dest'
    "
    if [ ! -f "$dest" ]; then
        if ! synchronized "$lock" "$handler"; then
            source <($rc_gen_cmd) && return
        fi
    fi
    source "$dest"
}

# zccs for command
function zccs::cmd() { zccs "$1" }

# zccs for file
function zccs::file() { zccs "< $1" "$(basename "$1")" }

# clean ccs generated files
function zclean() { rm -rf "$ZCCS_DIR" ~/.zcompdump* }
##### }}} utils #####

##### theme {{{ #####
source <(starship init zsh) || logwarn "failed loading starship."
# 'denysdovhan/spaceship-prompt'
# 'bhilburn/powerlevel9k'
# 'subnixr/minimal'
# 'mafredri/zsh-async'
# 'sindresorhus/pure'
##### }}} theme #####

::defer_source::() {
    ##### program plugins {{{ #####
    # zlk <from> [dest]
    zlk() {
        local src="$1"; local dest="$src"
        [ $# -eq 2 ] && dest="$2"
        ln -sf "$(pwd)/$src" "$HOME/bin/$dest"
        echo "link built: ~/bin/$dest -> $(pwd)/$src"
    }
    zplghr() { zpl ice nocompile as='null' from='gh-r' atclone="$2" atpull='%atclone'; zpl light "$1" }

    [ -f ~/.fzf.zsh       ] && source ~/.fzf.zsh
    [ -f ~/.zsh_fzf_extra ] && source ~/.zsh_fzf_extra

    zpl light-mode as='null' cloneonly depth='1' nocompile for                                             \
        atclone='zlk iconful.sh iconful'                                                                   \
            'wfxr/iconful'                                                                                 \
        atclone='zlk b'                                                                                    \
            'wfxr/fzf-chrome-marks'                                                                        \
        atclone='zlk diff-so-fancy && git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"' \
            'so-fancy/diff-so-fancy'                                                                       \
        atclone="zlk httpstat.py httpstat"                                                                 \
            'reorx/httpstat'                                                                               \
        atclone="zlk pushover-cli pushover"                                                                \
            'wfxr/pushover-cli'                                                                     \
        ;

    EMOJI_CLI_KEYBIND='^[m'
    zpl light-mode as='null' cloneonly depth='1' for                                                       \
        atclone='zlk emojify; zlk fuzzy-emoji' multisrc='*.zsh'                                            \
            'wfxr/emoji-cli'                                                                               \
        ;

    (( $+commands[jq]        )) || zplghr 'stedolan/jq'        'zlk jq* jq'
    (( $+commands[exa]       )) || zplghr 'ogham/exa'          'zlk exa* exa'
    (( $+commands[assh]      )) || zplghr 'moul/assh'          'zlk assh* assh'
    (( $+commands[fd]        )) || zplghr 'sharkdp/fd'         'zlk */fd fd'
    (( $+commands[bat]       )) || zplghr 'sharkdp/bat'        'zlk */bat bat'
    (( $+commands[hyperfine] )) || zplghr 'sharkdp/hyperfine'  'zlk */hyperfine hyperfine'
    (( $+commands[rg]        )) || zplghr 'BurntSushi/ripgrep' 'zlk */rg rg'
    (( $+commands[mmv]       )) || zplghr 'itchyny/mmv'        'zlk */mmv mmv'

    [ $DEV_KOTLIN ] && zplghr 'pinterest/ktlint' 'zlk ktlint ktlint'
    ##### }}} program plugins #####

    ##### general plugins {{{ #####
    # forgit should be loaded after .zsh_fzf_extra to read fzf's env
    export FORGIT_FZF_DEFAULT_OPTS="--preview-window='right:60%:nohidden'"
    export FORGIT_LOG_FZF_OPTS="--height '95%'"
    export ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(forward-word forward-char)
    export ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line)
    zpl light-mode lucid depth='1' for         \
        atload='_zsh_autosuggest_start'        \
            'zsh-users/zsh-autosuggestions'    \
        blockf                                 \
            'zsh-users/zsh-completions'        \
            'zdharma/fast-syntax-highlighting' \
            'hlissner/zsh-autopair'            \
            'rupa/z'                           \
            'wfxr/forgit'                      \
            'wfxr/forepos'                     \
            'wfxr/epoch-cli'                   \
            'wfxr/formarks'                    \
            'soimort/translate-shell'          \
            'RobSis/zsh-completion-generator'  \
            'olets/zsh-abbr'                   \
            ;
    ##### }}} general plugins #####

    ##### snippet plugins {{{ #####
    OMZ="${ZPLGM[PLUGINS_DIR]:-$HOME/.zplugin/plugins}/ohmyzsh---ohmyzsh/plugins"
    zpl ice as='null' cloneonly depth='1' nocompile; zpl light 'ohmyzsh/ohmyzsh'
    zpl snippet "$OMZ/git-extras/git-extras.plugin.zsh"
    zpl snippet "$OMZ/git-flow-avh/git-flow-avh.plugin.zsh"
    zpl snippet "$OMZ/mvn/mvn.plugin.zsh"
    zpl snippet "$OMZ/colored-man-pages/colored-man-pages.plugin.zsh"
    zpl ice as='completion'; zpl snippet "$OMZ/docker/_docker"
    zpl ice as='completion'; zpl snippet "$OMZ/gem/_gem"
    zpl ice as='completion'; zpl snippet "$OMZ/lein/_lein"
    ##### }}} snippet plugins #####

    ##### other rcs {{{ #####
    source ~/.zsh_misc
    source ~/.zsh_aliases
    [ -f ~/.zsh_local  ] && source ~/.zsh_local
    [ -f ~/.zsh_secret ] && source ~/.zsh_secret 2>/dev/null # maybe locked
    source ~/.zsh_custom
    ##### }}} other rcs #####

    ##### compinit {{{ #####
    # https://gist.github.com/ctechols/ca1035271ad134841284
    custom_compinit() {
        autoload -Uz compinit
        # once a day
        for dump in ~/.zcompdump(N.mh+24); do
            compinit; zpcdreplay; return
        done
        compinit -C; zpcdreplay
    }; custom_compinit
    unset -f custom_compinit
    ##### }}} compinit #####

    ##### completions {{{ #####
    export ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(forward-word forward-char)
    export ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line)
    zpl light-mode lucid depth='1' for         \
        atload='_zsh_autosuggest_start'        \
            'zsh-users/zsh-autosuggestions'    \
        blockf                                 \
            'zdharma/fast-syntax-highlighting' \

    # zpl light-mode lucid depth='1' for         \
            # 'Aloxaf/fzf-tab' \

    # FZF_TAB_COMMAND=(
        # fzf
        # --ansi   # Enable ANSI color support, necessary for showing groups
        # --expect='$continuous_trigger' # For continuous completion
        # '--color=hl:$(( $#headers == 0 ? 108 : 255 ))'
        # --nth=2,3 --delimiter='\x00'  # Don't search prefix
        # --no-border --layout=reverse --height='${FZF_TMUX_HEIGHT:=75%}'
        # --tiebreak=begin -m --bind=tab:down,btab:up,change:top,alt-m:toggle+down --cycle
        # '--query=$query'   # $query will be expanded to query string at runtime.
        # '--header-lines=$#headers' # $#headers will be expanded to lines of headers at runtime
    # )
    # zstyle ':completion:complete:*:options' sort false
    # zstyle ':fzf-tab:*' command $FZF_TAB_COMMAND
    # zstyle ':fzf-tab:*' ignore 5
    # zstyle ':completion:*' menu yes select
    ##### }}} completions #####

    ##### dynamic generated {{{ #####
    [ $DEV_TRAVIS ] && zccs::file '~/.travis/travis.sh'
    [ $DEV_K8S    ] && zccs::cmd  'kubectl completion zsh'
    [ $DEV_K8S    ] && zccs::cmd  'minikube completion zsh'
    [ $DEV_NODE   ] && zccs::cmd  'nodenv init - zsh'
    [ $DEV_RUBY   ] && zccs::cmd  'rbenv init - zsh'
    [ $DEV_PYTHON ] && zccs::cmd  'pyenv init - zsh'
    [ $DEV_PYTHON ] && zccs::cmd  'pip completion --zsh' # fucking slow. cache it!
    [ $DEV_PYTHON ] && zccs::cmd  'pipenv --completion' # fucking slow. cache it!

    # (( $+commands[broot] )) && zccs::cmd 'broot --print-shell-function zsh'
    (( $+commands[gh] )) && zccs::cmd 'gh completion --shell zsh'

    export GENCOMPL_FPATH="$CUSTOM_FPATH"
    # Now fzf in arch package has completion included
    # [ -f "$GENCOMPL_FPATH/_fzf" ] || gencomp fzf
    ##### }}} dynamic generated  #####
}

# for bench or install zsh plugins first time
if [ "$DISABLE_ZSH_DEFER" = true ]; then
    ::defer_source::
else
    zsh-defer -a -c ::defer_source::
fi

# zprof

# vim: foldmethod=marker foldenable:
