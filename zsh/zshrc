# zmodload zsh/zprof
bindkey -e # should be on top!

(( $+commands[sheldon] )) || {
    curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh |
        bash -s -- --repo rossmacarthur/sheldon --to ~/bin
}

[[ $OSTYPE =~ darwin ]] && {
    # Make sure homebrew has higher priority
    export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
}

# theme
source <(starship init zsh) || warn "failed loading starship."

# You Should Use
export YSU_MODE=ALL

# forgit config
export FORGIT_FZF_DEFAULT_OPTS="--preview-window='right:60%:nohidden'"
export FORGIT_LOG_FZF_OPTS="--height '95%'"

# autosuggest config
export ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(forward-word forward-char)
export ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(end-of-line)

source ~/.zsh_misc
source ~/.zsh_aliases
[ -f ~/.zsh_local  ] && source ~/.zsh_local
[ -f ~/.zsh_secret ] && source ~/.zsh_secret 2>/dev/null # maybe locked

source ~/.zsh_custom
source ~/.zsh_fzf_extra

function synchronized() {
    local lock="$1" handler="$2" fallback="$3"
    [ -e "$lock" ] && kill -0 "$(command cat "$lock" 2>/dev/null)" && return 1

    trap "command rm -f $lock" INT TERM EXIT
    mkdir -p "${lock%/*}" && echo $$ > "$lock"

    eval "$handler"
    command rm -f "$lock"
}

# cache directory for zinit
ZINIT_CACHE="/tmp/zinit::cache/$UID"
function zi::cache() {
    local srcgen="$1" dest="$ZINIT_CACHE/${2:-$1}.zi::cache" lock="$ZINIT_CACHE/lock"
    local handler="
        [ -f '$dest' ] && return # double check
        eval '$srcgen' > '$dest'
        zcompile '$dest'
    "
    if [ ! -f "$dest" ]; then
        if ! synchronized "$lock" "$handler"; then
            source <($rc_gen_cmd) && return
        fi
    fi
    source "$dest"
}

function zi::cache::cmd()   { zi::cache "$1"                      }
function zi::cache::file()  { zi::cache "< $1" "$(basename "$1")" }
function zi::cache::clean() { rm -rf "$ZINIT_CACHE" ~/.zcompdump* }

# Source all the plugins âœ¨
eval "$(sheldon source)"
