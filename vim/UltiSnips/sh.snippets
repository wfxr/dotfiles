snippet usage "Show usage..." b
usage() { echo "Usage: \$(basename "\$0") <${1:param}>" >&2; }
endsnippet

snippet sdir "Description" b
SDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)${1: && cd "$SDIR"${2: || exit 1}}
endsnippet

snippet continue? "Continue? [y/N]" b
read -n1 -rp "${1:Continue? [y/N] }" res; echo
${2:[[ ! $res =~ y|Y ]] && exit 1}

endsnippet

snippet hascmd "If command exists..." b
hash ${1:cmd} &>/dev/null ${2:&&} ${3:do something with $1}
endsnippet


snippet Continue? "Continue? [y/N]" b
if [ "$1" != "-y" ]; then
	read -r -p "Continue? [y/N] " response
	case "$response" in
		[yY][eE][sS]|[yY])
			;;
		*)
			exit 0
			;;
	esac
fi
endsnippet

snippet root "Get root privilege" b
[ "$(whoami)" != "root" ] && exec sudo -- "\$0" "$@"

endsnippet

snippet temp "Temp file or directory"
${6:trap 'command rm -rf $$1' ${7:EXIT INT TERM HUP}}
${1:TEMP}="$(mktemp -t${2:d} ${3:--suffix=${4:.tmp}} ${5:"$(basename "\$0")"}.XXXXXX)"
endsnippet

snippet daily_schedule "Daily schedule template" b
usage() {
	echo "Usage: \$0 <yyyy-MM-dd>" >&2
	exit 1
}

if [[ \$# -ne 1 ]]; then
	usage
	exit
fi
date=\`date --date=\$1 +%F\`

SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
cd \$SCRIPT_DIR

endsnippet

snippet ls_full_path "List with full path" b
ls -d${2} "${1:$PWD}"/*
endsnippet

snippet path "Export PATH env" b
PATH=${1:$2/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$HOME/.local/bin:$HOME/bin$3}

endsnippet

snippet gemhome "export GEM_HOME=..." b
export GEM_HOME="`gem env home |sed "s#$HOME#\$HOME#"`"
$1
endsnippet

snippet gohome "export GOPATH=..." b
export GOPATH="`echo $GOPATH |sed "s#$HOME#\$HOME#"`"
export PATH="$PATH:$GOPATH/bin"
$1
endsnippet

# snippet logpath "setting log path..." b
# logdir="logs/$(date -I)"
# logPath="$logdir/${1:`!v expand('%:t')`}.log"
# mkdir -p "$logdir"
# endsnippet

snippet logfile "log to file" b
log() { echo "$(date -Iseconds)" "$*"${1: >>"$logfile"}; }
$2
endsnippet

snippet join_by "join function" b
join_by() { local d=\$1; shift; echo -n "\$1"; shift; printf "%s" "${@/#/$d}"; }
endsnippet

snippet link_target "get link target" i
$(dirname $(readlink "${1:\$0}"))
endsnippet

snippet ifssh "If in ssh session..." b
[ "$SSH_CLIENT" ] ${1:&&} ${2:do something with}
endsnippet

snippet #! "#!/usr/bin/env bash" b
#!/usr/bin/env bash
endsnippet

snippet sbash "safe bash guard" b
set -euo pipefail
IFS=$'\n\t'

$0
endsnippet

snippet logstagefn "Simple function to log stage message" b
logstage() { echo "$(date -Iseconds) - [\$1]: \$2"; }
endsnippet

snippet logstage "Log stage message" b
logstage "beg" "${1:do something} ..."
${2:${VISUAL}}
logstage "end" "$1." && echo
endsnippet

snippet readlines "Read a file line by line" b
while IFS='' read -r line || [[ -n "$line" ]]; do
	${1:echo "$line"}
done < "${2:$file}"
endsnippet

snippet arrayfromfile "Read lines to array" b
readarray -t ${1:arr} <${2:/path/to/file}
endsnippet

snippet arrayfromcmd "Read lines to array from cmd" b
readarray -t ${1:arr} <(${2:cmd})
endsnippet

snippet log "log messages with color" b
info() { printf "${1:$(date -Is) }%b[info]%b %s\n" '\e[0;32m\033[1m' '\e[0m' "$*" >&2; }
warn() { printf "$1%b[warn]%b %s\n" '\e[0;33m\033[1m' '\e[0m' "$*" >&2; }
erro() { printf "$1%b[erro]%b %s\n" '\e[0;31m\033[1m' '\e[0m' "$*" >&2; }
endsnippet

snippet require "description"
require() {
	for var in "$@"; do
		eval "test -z \\$$var" && echo "variable $var not set" >&2 && return 1
	done
	return 0
}
endsnippet

snippet shellcheck "shellcheck disable..." b
# shellcheck disable=SC$1
endsnippet
